const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

class ConfigChecker {
    constructor() {
        this.errors = [];
        this.warnings = [];
    }

    checkInitialization() {
        console.log(chalk.yellow('üîç Checking if server is properly initialized...'));
        
        this.checkEnvFile();
        this.checkConfigFile();
        this.checkRequiredEnvVars();
        this.checkProjectPath();
        
        return this.generateReport();
    }

    checkEnvFile() {
        const envPath = path.join(process.cwd(), '.env');
        if (!fs.existsSync(envPath)) {
            this.errors.push('Missing .env file');
            return false;
        }
        
        try {
            const envContent = fs.readFileSync(envPath, 'utf8');
            if (envContent.trim().length === 0) {
                this.errors.push('.env file is empty');
                return false;
            }
            
            // Check if it looks like it was generated by our init script
            if (!envContent.includes('Power Pages Local Server Configuration')) {
                this.warnings.push('.env file may not be properly configured');
            }
            
            return true;
        } catch (error) {
            this.errors.push(`Cannot read .env file: ${error.message}`);
            return false;
        }
    }

    checkConfigFile() {
        const configPath = path.join(process.cwd(), 'config.json');
        if (!fs.existsSync(configPath)) {
            this.errors.push('Missing config.json file');
            return false;
        }
        
        try {
            const configContent = fs.readFileSync(configPath, 'utf8');
            const config = JSON.parse(configContent);
            
            // Check required sections
            const requiredSections = ['server', 'powerPages', 'mockUser', 'proxy'];
            for (const section of requiredSections) {
                if (!config[section]) {
                    this.errors.push(`Missing ${section} section in config.json`);
                }
            }
            
            return true;
        } catch (error) {
            this.errors.push(`Cannot read or parse config.json: ${error.message}`);
            return false;
        }
    }

    checkRequiredEnvVars() {
        // Load environment variables
        require('dotenv').config();
        
        const requiredVars = [
            'BASE_URL',
            'MOCK_USER_ID'
        ];
        
        // Note: REQUEST_VERIFICATION_TOKEN is no longer required
        // OAuth2 authentication is handled separately
        
        for (const varName of requiredVars) {
            if (!process.env[varName]) {
                this.errors.push(`Missing required environment variable: ${varName}`);
            }
        }
        
        // Validate GUID format for user ID
        if (process.env.MOCK_USER_ID) {
            const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
            if (!guidRegex.test(process.env.MOCK_USER_ID)) {
                this.errors.push('MOCK_USER_ID is not in valid GUID format');
            }
        }
        
        // Validate URL format
        if (process.env.BASE_URL) {
            try {
                new URL(process.env.BASE_URL);
            } catch (error) {
                this.errors.push('BASE_URL is not a valid URL');
            }
        }
    }

    checkProjectPath() {
        const projectPath = process.env.PROJECT_PATH || process.cwd();
        if (!fs.existsSync(projectPath)) {
            this.errors.push(`Project path does not exist: ${projectPath}`);
        }
    }

    generateReport() {
        const isInitialized = this.errors.length === 0;
        
        if (isInitialized) {
            console.log(chalk.green('‚úÖ Server is properly initialized'));
            
            if (this.warnings.length > 0) {
                console.log(chalk.yellow('\n‚ö†Ô∏è  Warnings:'));
                this.warnings.forEach(warning => {
                    console.log(chalk.yellow(`  ‚Ä¢ ${warning}`));
                });
            }
            
            return { initialized: true, errors: [], warnings: this.warnings };
        } else {
            console.log(chalk.red('\n‚ùå Server is not properly initialized'));
            console.log(chalk.red('   The following issues were found:'));
            
            this.errors.forEach(error => {
                console.log(chalk.red(`  ‚Ä¢ ${error}`));
            });
            
            console.log(chalk.yellow('\nüí° To fix these issues, run the initialization script:'));
            console.log(chalk.cyan('   npm run init'));
            
            console.log(chalk.gray('\nThis will guide you through the setup process and generate'));
            console.log(chalk.gray('all the required configuration files.'));
            
            return { initialized: false, errors: this.errors, warnings: this.warnings };
        }
    }

  static async checkAndPromptInit() {
        const checker = new ConfigChecker();
        const result = checker.checkInitialization();
        
        if (!result.initialized) {
            console.log(chalk.yellow('\nüöÄ Would you like to run the initialization now? (y/n)'));
            
            const readline = require('readline');
            const rl = readline.createInterface({
                input: process.stdin,
                output: process.stdout
            });
            
            return new Promise((resolve) => {
                rl.question(chalk.cyan('Initialize now? '), async (answer) => {
                    rl.close();
                    
                    if (answer.trim().toLowerCase() === 'y' || answer.trim().toLowerCase() === 'yes') {
                        console.log(chalk.blue('\nüîÑ Running initialization...'));
                        
                        try {
                            const { spawn } = require('child_process');
                            const initProcess = spawn('npm', ['run', 'init'], { 
                                stdio: 'inherit',
                                shell: true 
                            });
                            
                            initProcess.on('close', (code) => {
                                if (code === 0) {
                                    console.log(chalk.green('\n‚úÖ Initialization completed successfully!'));
                                    console.log(chalk.yellow('You can now start the server with: npm start'));
                                } else {
                                    console.log(chalk.red('‚ùå Initialization failed'));
                                }
                                resolve({ initialized: code === 0, ranInit: true });
                            });
                        } catch (error) {
                            console.error(chalk.red('‚ùå Failed to run initialization:'), error.message);
                            resolve({ initialized: false, ranInit: false });
                        }
                    } else {
                        console.log(chalk.gray('\nSetup skipped. Please run "npm run init" when you\'re ready.'));
                        resolve({ initialized: false, ranInit: false });
                    }
                });
            });
        }
        
        return result;
    }
}

module.exports = ConfigChecker;
